package com.jamiltron.homunculus.controller;

import com.jamiltron.homunculus.model.World;
import com.jamiltron.homunculus.model.Spell;
import com.jamiltron.homunculus.model.Component;
import com.jamiltron.homunculus.model.Homunculus;
import java.util.HashMap;
import java.util.Map;

public class WorldController {
  enum Keys {
    LEFT, RIGHT, ROTR, ROTL, DROP;
  }
  
  private World world;
  private Spell activeSpell;
  float currentTime;
  
  static Map<Keys, Boolean> keys = new HashMap<WorldController.Keys, Boolean>();
  static {
    keys.put(Keys.LEFT,   false);
    keys.put(Keys.RIGHT,  false);
    keys.put(Keys.ROTR, false);
    keys.put(Keys.ROTL, false);
    keys.put(Keys.DROP,   false);
  };
  
  public void leftPress() {
    keys.put(Keys.LEFT, true);
  }
  
  public void rightPress() {
    keys.put(Keys.RIGHT, true);
  }
  
  public void rotrPress() {
    keys.put(Keys.ROTR, true);
  }
  
  public void rotlPress() {
    keys.put(Keys.ROTL, true);
  }
  
  public void leftRelease() {
    keys.put(Keys.LEFT, false);
  }
  
  public void rightRelease() {
    keys.put(Keys.RIGHT, false);
  }
  
  public void rotrRelease() {
    keys.put(Keys.ROTR, false);
  }
  
  public void rotlRelease() {
    keys.put(Keys.ROTL, false);
  }
  
  public WorldController(World w) {
    world = w;
    activeSpell = w.getActiveSpell();
    currentTime = 0f;
  }

  
  public void update(float dt) {
    currentTime += dt;
    if (currentTime >= 0.25f) {
      currentTime -= 0.25f;
      if (activeSpell == null) {
        world.restSpell();
        activeSpell = world.getActiveSpell();
      } else {
        activeSpell.setVel(null, -Component.SPEED);
      }
    }
    updateSpell(dt, world);
  }

  
  private void updateSpell(float dt, World world) {
    if (activeSpell != null) {
      boolean canMove = true;
//      boolean canRotate = true;
      
//      // check if we can rotate right
//      if (keys.get(Keys.ROTR) &&
//          activeSpell.getRotateTime() <= 0f) {
//        if (activeSpell.isStanding()) {
//          if (activeSpell.rightComponent().pos.x < 9) {
//            for (Homunculus h: world.getHomunculi()) {
//              if (h.pos.y == activeSpell.bottomComponent().pos.y &&
//                  h.pos.x == activeSpell.bottomComponent().pos.x + 1f) {
//                canRotate = false;
//                break;
//              }
//            }
//            for (Spell s : world.getSetSpells()) {
//              if (s.pos.y )
//            }
//          }
//        }
//      }
      
      // check if we can move left
      if (keys.get(Keys.LEFT) && 
          activeSpell.getPauseTime() <= 0f &&
          activeSpell.leftComponent().pos.x > 2) {
        
        for (Homunculus h : world.getHomunculi()) {
          if (h.pos.x == activeSpell.leftComponent().pos.x - 1f &&
              h.pos.y == activeSpell.leftComponent().pos.y) {
            canMove = false;
            break;
          }
        }
        if (canMove) {
          activeSpell.setPauseTime(0.25f + dt);
          activeSpell.setVel(-Component.SPEED, null);
        }
        canMove = true;
      } 
      
      // check if we can move right
      if (keys.get(Keys.RIGHT) && 
          activeSpell.getPauseTime() <= 0f &&
          activeSpell.rightComponent().pos.x < 9){
        
        for (Homunculus h : world.getHomunculi()) {
          if (h.pos.x == activeSpell.rightComponent().pos.x + 1f &&
              h.pos.y == activeSpell.rightComponent().pos.y) {
            canMove = false;
            break;
          }
        }
        
        if (canMove) {
          activeSpell.setPauseTime(0.25f + dt);
          activeSpell.setVel(Component.SPEED, null);
        }
        canMove = true;
      }
      
      // nullify movement if the player is holding down both
      if (keys.get(Keys.LEFT) && keys.get(Keys.RIGHT)) {
        activeSpell.setVel(0f, null);
      }
      
      // check if we can move down
      for (Spell setSpell : world.getSetSpells()) {
        // if there is a collision
        if (activeSpell.bottomComponent().pos.y - 1f ==
            setSpell.topComponent().pos.y) {
          if ((activeSpell.leftComponent().pos.x == setSpell.leftComponent().pos.x ||
              activeSpell.leftComponent().pos.x == setSpell.rightComponent().pos.x) ||
              (activeSpell.rightComponent().pos.x == setSpell.leftComponent().pos.x ||
              activeSpell.rightComponent().pos.x == setSpell.rightComponent().pos.x)) {
            canMove = false;
            break;
          }
        }
      }
      
      for (Homunculus homunculi : world.getHomunculi()) {
        if (activeSpell.bottomComponent().pos.y - 1f == 
            homunculi.pos.y &&
            (activeSpell.leftComponent().pos.x == homunculi.pos.x ||
            activeSpell.rightComponent().pos.x == homunculi.pos.x)) {
          canMove = false;
          break;
        }
      }
      
      if (canMove && activeSpell.bottomComponent().pos.y == 2f) {
        canMove = false;
      }
      
      if (canMove) {
        activeSpell.update(dt);
        activeSpell.setVel(0f, 0f);
      } else {
        activeSpell.setVel(0f, 0f);
        world.restSpell();
        activeSpell = world.getActiveSpell();
      }
      
    }
  }
  
}
