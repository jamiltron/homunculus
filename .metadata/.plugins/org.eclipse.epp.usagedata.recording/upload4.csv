what,kind,bundleId,bundleVersion,description,time
activated,view,org.eclipse.jdt.ui,3.7.2.v20120109-1427,"org.eclipse.jdt.ui.PackageExplorer",1357098770207
deactivated,workbench,org.eclipse.ui.workbench,3.7.1.v20120104-1859,"",1357098772231
activated,workbench,org.eclipse.ui.workbench,3.7.1.v20120104-1859,"",1357098789463
activated,editor,org.eclipse.jdt.ui,3.7.2.v20120109-1427,"org.eclipse.jdt.ui.CompilationUnitEditor",1357098805734
executed,command,org.eclipse.ui,3.7.0.v20110928-1505,"org.eclipse.ui.file.save",1357098810006
executed,command,org.eclipse.ui.workbench.texteditor,3.7.0.v20110928-1504,"org.eclipse.ui.edit.text.goto.lineUp",1357098810243
executed,command,com.mulgasoft.emacsplus,3.6.5,"com.mulgasoft.emacsplus.previousLine",1357098810243
executed,command,org.eclipse.ui.workbench.texteditor,3.7.0.v20110928-1504,"org.eclipse.ui.edit.text.goto.lineStart",1357098810463
executed,command,com.mulgasoft.emacsplus,3.6.5,"com.mulgasoft.emacsplus.beginLine",1357098810463
executed,command,org.eclipse.ui.workbench.texteditor,3.7.0.v20110928-1504,"org.eclipse.ui.edit.text.goto.lineStart",1357098810967
executed,command,com.mulgasoft.emacsplus,3.6.5,"com.mulgasoft.emacsplus.beginLine",1357098810967
executed,command,org.eclipse.ui.workbench.texteditor,3.7.0.v20110928-1504,"org.eclipse.ui.edit.text.cut.line.to.end",1357098811465
executed,command,com.mulgasoft.emacsplus,3.6.5,"com.mulgasoft.emacsplus.killLine",1357098811465
executed,command,org.eclipse.ui,3.7.0.v20110928-1505,"org.eclipse.ui.file.save",1357098812107
executed,command,org.eclipse.ui,3.7.0.v20110928-1505,"org.eclipse.ui.file.save",1357098815899
activated,view,org.eclipse.jdt.ui,3.7.2.v20120109-1427,"org.eclipse.jdt.ui.PackageExplorer",1357098817967
deactivated,workbench,org.eclipse.ui.workbench,3.7.1.v20120104-1859,"",1357098819355
activated,workbench,org.eclipse.ui.workbench,3.7.1.v20120104-1859,"",1357098825184
activated,editor,org.eclipse.jdt.ui,3.7.2.v20120109-1427,"org.eclipse.jdt.ui.CompilationUnitEditor",1357098826106
executed,command,org.eclipse.ui.workbench.texteditor,3.7.0.v20110928-1504,"org.eclipse.ui.edit.text.goto.columnPrevious",1357098853193
executed,command,com.mulgasoft.emacsplus,3.6.5,"com.mulgasoft.emacsplus.backwardChar",1357098853193
error,log,,,"Exception occurred during compilation unit conversion:\n----------------------------------- SOURCE BEGIN -------------------------------------\npackage com.jamiltron.homunculus.controller;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport com.badlogic.gdx.Game;\nimport com.jamiltron.homunculus.Assets;\nimport com.jamiltron.homunculus.Settings;\nimport com.jamiltron.homunculus.model.Component;\nimport com.jamiltron.homunculus.model.Homunculus;\nimport com.jamiltron.homunculus.model.Spell;\nimport com.jamiltron.homunculus.model.World;\nimport com.jamiltron.homunculus.screen.MainMenu;\nimport com.jamiltron.homunculus.util.JArray;\n\npublic class WorldController {\n  enum Keys {\n    LEFT, RIGHT, ROTR, ROTL, DROP, PAUSE, ANY;\n  }\n\n  public boolean nextLevel;\n  private final Game game;\n  private World world;\n  private Spell activeSpell;\n  private final Settings settings;\n  private boolean unpausable;\n  float currentTime;\n  float dropTime;\n  float fastTime;\n  public float normalTime;\n  float pauseTime;\n  int drops;\n\n  JArray<Boolean> toDestroy;\n\n  static Map<Keys, Boolean> keys = new HashMap<WorldController.Keys, Boolean>();\n  static {\n    keys.put(Keys.LEFT, false);\n    keys.put(Keys.RIGHT, false);\n    keys.put(Keys.ROTR, false);\n    keys.put(Keys.ROTL, false);\n    keys.put(Keys.DROP, false);\n    keys.put(Keys.PAUSE, false);\n    keys.put(Keys.ANY, false);\n  };\n\n  public void resetKeys() {\n    keys.put(Keys.LEFT, false);\n    keys.put(Keys.RIGHT, false);\n    keys.put(Keys.ROTR, false);\n    keys.put(Keys.ROTL, false);\n    keys.put(Keys.DROP, false);\n    keys.put(Keys.PAUSE, false);\n    keys.put(Keys.ANY, false);\n  }\n\n  public void leftPress() {\n    keys.put(Keys.LEFT, true);\n  }\n\n  public void rightPress() {\n    keys.put(Keys.RIGHT, true);\n  }\n\n  public void rotrPress() {\n    keys.put(Keys.ROTR, true);\n  }\n\n  public void rotlPress() {\n    keys.put(Keys.ROTL, true);\n  }\n\n  public void dropPress() {\n    keys.put(Keys.DROP, true);\n  }\n\n  public void pausePress() {\n    keys.put(Keys.PAUSE, true);\n  }\n\n  public void anyPress() {\n    keys.put(Keys.ANY, true);\n  }\n\n  public void leftRelease() {\n    keys.put(Keys.LEFT, false);\n  }\n\n  public void rightRelease() {\n    keys.put(Keys.RIGHT, false);\n  }\n\n  public void rotrRelease() {\n    keys.put(Keys.ROTR, false);\n  }\n\n  public void rotlRelease() {\n    keys.put(Keys.ROTL, false);\n  }\n\n  public void dropRelease() {\n    keys.put(Keys.DROP, false);\n  }\n\n  public void pauseRelease() {\n    keys.put(Keys.PAUSE, false);\n  }\n\n  public void anyRelease() {\n    keys.put(Keys.ANY, false);\n  }\n\n  public void resetController(World w) {\n    world = w;\n    nextLevel = false;\n    pauseTime = 0.15f;\n    drops = 0;\n    activeSpell = world.getActiveSpell();\n    currentTime = 0f;\n\n    // grab the game speed from the settings\n    if (settings.getSpeed().ordinal() == 0) {\n      normalTime = 0.75f;\n      fastTime = 0.1f;\n    } else if (settings.getSpeed().ordinal() == 1) {\n      normalTime = 0.5f;\n      fastTime = 0.1f;\n    } else if (settings.getSpeed().ordinal() == 2) {\n      normalTime = 0.25f;\n      fastTime = 0.08f;\n    } else {\n      throw new IllegalArgumentException(""Invalid speed setting"");\n    }\n\n    dropTime = normalTime;\n    for (int y = 2; y <= 18; y++) {\n      for (int x = 2; x <= 9; x++) {\n        toDestroy.set(x, y, false);\n      }\n    }\n  }\n\n  public WorldController(World w, Settings s, Game g) {\n    nextLevel = false;\n    game = g;\n    unpausable = true;\n    settings = s;\n    pauseTime = 0.15f;\n    drops = 0;\n    world = w;\n    activeSpell = w.getActiveSpell();\n    currentTime = 0f;\n\n    // grab the game speed from the settings\n    if (settings.getSpeed().ordinal() == 0) {\n      normalTime = 0.75f;\n      fastTime = 0.1f;\n    } else if (settings.getSpeed().ordinal() == 1) {\n      normalTime = 0.5f;\n      fastTime = 0.1f;\n    } else if (settings.getSpeed().ordinal() == 2) {\n      normalTime = 0.25f;\n      fastTime = 0.08f;\n    } else {\n      throw new IllegalArgumentException(""Invalid speed setting"");\n    }\n\n    dropTime = normalTime;\n    toDestroy = new JArray<Boolean>(8, 17);\n    for (int y = 2; y <= 18; y++) {\n      for (int x = 2; x <= 9; x++) {\n        toDestroy.set(x, y, false);\n      }\n    }\n  }\n\n  public void updateOver() {\n    if (!world.lost && !world.won\n        && (world.getGrid(5, 18) != null || world.getGrid(6, 18) != null)) {\n      world.lost = true;\n      resetKeys();\n    }\n\n    if (world.lost && keys.get(Keys.ANY)) {\n      game.setScreen(new MainMenu(game));\n    }\n  }\n  public void updatePaused() {\n    // if the game is not paused, pause it\n    if (unpausable && !world.paused && keys.get(Keys.PAUSE)) {\n      world.paused = true;\n      unpausable = false;\n      // if the game is paused, unpause it\n    } else if (unpausable && world.paused && keys.get(Keys.ANY)) {\n      world.paused = false;\n      unpausable = false;\n      resetKeys();\n    } else if (keys.get(Keys.PAUSE) == false) {\n      unpausable = true;\n    }\n  }\n\n  public void updateWon() {\n    if (!world.won && world.homunculi.size == 0) {\n      world.won = true;\n      resetKeys();\n    }\n\n    if (world.won && keys.get(Keys.ANY)) {\n      activeSpell = null;\n      nextLevel = true;\n    }\n  }\n\n  public void update(float dt) {\n    updateOver();\n    if (!world.lost) {\n      updateWon();\n      if (!world.won) {\n        updatePaused();\n        if (!world.paused) {\n          if (!updateDrops(dt)) {\n            if (keys.get(Keys.DROP) && activeSpell != null) {\n              dropTime = fastTime;\n            } else {\n              dropTime = normalTime;\n            }\n            currentTime += dt;\n            if (currentTime >= dropTime) {\n              currentTime -= dropTime;\n              if (activeSpell == null) {\n                world.restSpell();\n                activeSpell = world.getActiveSpell();\n              } else {\n                activeSpell.setVel(null, -Component.SPEED);\n              }\n            }\n            updateSpell(dt);\n            updateMatches();\n          }\n        }\n      }\n    }\n  }\n  private boolean updateDrops(float dt) {\n    boolean check1;\n    boolean check2;\n    boolean keepChecking = false;\n\n    for (Spell spell : world.setSpells) {\n      check1 = true;\n      check2 = true;\n      if (spell.component1 == null)\n        check1 = false;\n      if (spell.component2 == null)\n        check2 = false;\n\n      if (check1 && check2) {\n\n        if (spell.component1.pos.y > 2\n            && spell.component2.pos.y > 2\n            && world.getGrid(spell.component1.pos.x, spell.bottom() - 1f) == null\n            && world.getGrid(spell.component2.pos.x, spell.bottom() - 1f) == null) {\n          world.putGrid(spell.component1.pos.x, spell.component1.pos.y, null);\n          world.putGrid(spell.component2.pos.x, spell.component2.pos.y, null);\n          spell.setVel(null, -1f);\n          keepChecking = true;\n        } else {\n          world.putGrid(spell.component1.pos.x, spell.component1.pos.y,\n              spell.component1.color);\n          world.putGrid(spell.component2.pos.x, spell.component2.pos.y,\n              spell.component2.color);\n        }\n      } else if (check1) {\n        if ((spell.component1.pos.y != 2)\n            && world.getGrid(spell.component1.pos.x,\n                spell.component1.pos.y - 1f) == null) {\n          world.putGrid(spell.component1.pos.x, spell.component1.pos.y, null);\n          spell.setVel(null, -1f);\n          keepChecking = true;\n        } else {\n          world.putGrid(spell.component1.pos.x, spell.component1.pos.y,\n              spell.component1.color);\n        }\n\n      } else if (check2) {\n        if ((spell.component2.pos.y != 2)\n            && world.getGrid(spell.component2.pos.x,\n                spell.component2.pos.y - 1f) == null) {\n          world.putGrid(spell.component2.pos.x, spell.component2.pos.y, null);\n          spell.setVel(null, -1f);\n          keepChecking = true;\n        } else {\n          world.putGrid(spell.component2.pos.x, spell.component2.pos.y,\n              spell.component2.color);\n        }\n      } else {\n        throw new Error(""Error condition in updateDrops."");\n      }\n      spell.update(dt);\n      spell.setVel(null, 0f);\n    }\n\n    return keepChecking;\n  }\n\n  private void updateMatches() {\n    boolean playSound = false;\n\n    // check for rows to destroy\n    for (int y = 2; y <= 18; y++) {\n      for (int x = 2; x <= 6; x++) {\n        if ((world.getGrid(x, y) != null)\n            && world.getGrid(x, y) == (world.getGrid(x + 1, y))\n            && world.getGrid(x, y) == (world.getGrid(x + 2, y))\n            && world.getGrid(x, y) == (world.getGrid(x + 3, y))) {\n          for (int j = x; j <= x + 3; j++) {\n            toDestroy.set(j, y, true);\n            playSound = true;\n\n          }\n        }\n      }\n    }\n\n    // check for columns to destroy\n    for (int y = 2; y <= 15; y++) {\n      for (int x = 2; x <= 9; x++) {\n        if ((world.getGrid(x, y) != null)\n            && world.getGrid(x, y) == (world.getGrid(x, y + 1))\n            && world.getGrid(x, y) == (world.getGrid(x, y + 2))\n            && world.getGrid(x, y) == (world.getGrid(x, y + 3))) {\n          for (int j = y; j <= y + 3; j++) {\n            toDestroy.set(x, j, true);\n            playSound = true;\n          }\n        }\n      }\n    }\n\n    // go through each spell, and destroy it if it matches an entry in toDestroy\n    for (Spell spell : world.setSpells) {\n      float x, y;\n      if ((spell != null) && (spell.component1 != null)\n          && toDestroy.get(spell.component1.pos.x, spell.component1.pos.y)) {\n        x = spell.component1.pos.x;\n        y = spell.component1.pos.y;\n        spell.component1 = null;\n        world.putGrid(x, y, null);\n        toDestroy.set(x, y, false);\n      }\n      if ((spell != null) && (spell.component2 != null)\n          && toDestroy.get(spell.component2.pos.x, spell.component2.pos.y)) {\n        x = spell.component2.pos.x;\n        y = spell.component2.pos.y;\n        spell.component2 = null;\n        world.putGrid(x, y, null);\n        toDestroy.set(x, y, false);\n      }\n\n      if ((spell != null) && (spell.component1 == null)\n          && spell.component2 == null) {\n        world.deadSpells.add(spell);\n      }\n    }\n\n    // go through each homunculi and destroy it need be\n    for (Homunculus homunculi : world.homunculi) {\n      float x, y;\n      if ((homunculi != null)\n          && toDestroy.get(homunculi.pos.x, homunculi.pos.y)) {\n\n        x = homunculi.pos.x;\n        y = homunculi.pos.y;\n        world.deadHomunculi.add(homunculi);\n        world.putGrid(x, y, null);\n        toDestroy.set(x, y, false);\n      }\n    }\n\n    scoreUp();\n    world.cleanUp();\n\n    if (playSound)\n      Assets.playSound(Assets.match);\n  }\n\n  private void scoreUp() {\n    if (world.deadHomunculi.size > 0) {\n      world.score += settings.getScoreModifier()\n          * Math.pow(2, world.deadHomunculi.size - 1);\n    }\n  }\n  private void updateSpell(float dt) {\n    if (activeSpell != null) {\n      boolean canMove = true;\n      boolean playRotate = false;\n\n      // check if rotating right and can rotate\n      if (keys.get(Keys.ROTR) && activeSpell.getRotateTime() <= 0) {\n        if (activeSpell.isFlat() && activeSpell.topComponent().pos.y < 17) {\n          if (world.getGrid(activeSpell.leftComponent().pos.x,\n              activeSpell.leftComponent().pos.y + 1f) == null) {\n            Component left = activeSpell.leftComponent();\n            Component right = activeSpell.rightComponent();\n            right.pos.x -= 1f;\n            left.pos.y += 1f;\n            activeSpell.setRotateTime(0.25f + dt);\n            playRotate = true;\n          }\n        } else if (activeSpell.isStanding()\n            && activeSpell.topComponent().pos.y < 18\n            && activeSpell.rightComponent().pos.x < 9) {\n          if (world.getGrid(activeSpell.bottomComponent().pos.x + 1f,\n              activeSpell.bottomComponent().pos.y) == null) {\n            Component top = activeSpell.topComponent();\n            top.pos.x += 1f;\n            top.pos.y -= 1f;\n            activeSpell.setRotateTime(0.25f + dt);\n            playRotate = true;\n\n          }\n        }\n      }\n\n      // check if rotating left and can rotate\n      if (keys.get(Keys.ROTL) && activeSpell.getRotateTime() <= 0) {\n        if (activeSpell.isFlat() && activeSpell.topComponent().pos.y < 17) {\n          if (world.getGrid(activeSpell.leftComponent().pos.x,\n              activeSpell.leftComponent().pos.y + 1f) == null) {\n            Component right = activeSpell.rightComponent();\n            right.pos.y += 1f;\n            right.pos.x -= 1f;\n            activeSpell.setRotateTime(0.25f + dt);\n            playRotate = true;\n          }\n        } else if (activeSpell.isStanding()\n            && activeSpell.topComponent().pos.y < 18\n            && activeSpell.leftComponent().pos.x < 9) {\n          if (world.getGrid(activeSpell.bottomComponent().pos.x + 1f,\n              activeSpell.bottomComponent().pos.y) == null) {\n            Component top = activeSpell.topComponent();\n            Component bottom = activeSpell.bottomComponent();\n            top.pos.y -= 1f;\n            bottom.pos.x += 1f;\n            activeSpell.setRotateTime(0.25f + dt);\n            playRotate = true;\n          }\n        }\n      }\n\n      // check if we can move left\n      if (keys.get(Keys.LEFT) && activeSpell.getPauseTime() <= 0f\n          && activeSpell.leftComponent().pos.x > 2\n          && activeSpell.topComponent().pos.y < 18) {\n\n        if ((world.getGrid(activeSpell.topComponent().pos.x - 1f,\n            activeSpell.topComponent().pos.y) != null)\n            || (world.getGrid(activeSpell.bottomComponent().pos.x - 1f,\n                activeSpell.bottomComponent().pos.y) != null)\n            || (world.getGrid(activeSpell.leftComponent().pos.x - 1f,\n                activeSpell.leftComponent().pos.y) != null)) {\n          canMove = false;\n        }\n\n        if (canMove) {\n          activeSpell.setPauseTime(pauseTime + dt);\n          activeSpell.setVel(-Component.SPEED, null);\n        }\n        canMove = true;\n      }\n\n      // check if we can move right\n      if (keys.get(Keys.RIGHT) && activeSpell.getPauseTime() <= 0f\n          && activeSpell.rightComponent().pos.x < 9\n          && activeSpell.topComponent().pos.y < 18) {\n\n        if ((world.getGrid(activeSpell.topComponent().pos.x + 1f,\n            activeSpell.topComponent().pos.y) != null)\n            || (world.getGrid(activeSpell.bottomComponent().pos.x + 1f,\n                activeSpell.bottomComponent().pos.y) != null)\n            || (world.getGrid(activeSpell.rightComponent().pos.x + 1f,\n                activeSpell.rightComponent().pos.y) != null)) {\n          canMove = false;\n        }\n\n        if (canMove) {\n          activeSpell.setPauseTime(pauseTime + dt);\n          activeSpell.setVel(Component.SPEED, null);\n        }\n        canMove = true;\n      }\n\n      // nullify movement if the player is holding down both\n      if (keys.get(Keys.LEFT) && keys.get(Keys.RIGHT)) {\n        activeSpell.setVel(0f, null);\n      }\n\n      // check if we can move down\n\n      if (activeSpell.bottomComponent().pos.y == 2f) {\n        canMove = false;\n      } else {\n        if ((activeSpell.bottomComponent().pos.y > 2f((world.getGrid(activeSpell.leftComponent().pos.x,\n            activeSpell.leftComponent().pos.y - 1f) != null)\n            || (world.getGrid(activeSpell.rightComponent().pos.x,\n                activeSpell.rightComponent().pos.y - 1f) != null) || (world\n            .getGrid(activeSpell.bottomComponent().pos.x,\n                activeSpell.bottomComponent().pos.y - 1f) != null))\n            && (activeSpell.getVel().y == -Component.SPEED)) {\n          canMove = false;\n        }\n      }\n        \n      if (canMove) {\n        activeSpell.update(dt);\n        // after having moved, see if we are occupying some other entity\n        if ((world.getGrid(activeSpell.component1.pos.x,\n            activeSpell.component1.pos.y) != null)\n            || (world.getGrid(activeSpell.component2.pos.x,\n                activeSpell.component2.pos.y) != null)) {\n          activeSpell.setVel(activeSpell.component1.vel.x * -1f, 0f);\n          activeSpell.update(0f);\n        }\n        activeSpell.setVel(0f, 0f);\n      } else if (activeSpell.getVel().y == -Component.SPEED) {\n        drops += 1;\n        if (drops % 10 == 0 && drops != 0) {\n          normalTime -= 0.01f;\n          fastTime -= 0.01f;\n          if (normalTime < 0.01f)\n            normalTime = 0.01f;\n          if (fastTime < 0.01f)\n            fastTime = 0.01f;\n        }\n        Assets.playSound(Assets.drop);\n        activeSpell.setVel(0f, 0f);\n        world.restSpell();\n        activeSpell = world.getActiveSpell();\n      }\n\n      if (playRotate) {\n        Assets.playSound(Assets.rotate);\n      }\n    }\n  }\n\n}\n----------------------------------- SOURCE END -------------------------------------",1357098874779
error,log,,,"Problems occurred when invoking code from plug-in: ""org.eclipse.jdt.ui"".",1357098874779
error,log,,,"Error in JDT Core during reconcile",1357098874779
error,log,,,"Exception occurred during compilation unit conversion:\n----------------------------------- SOURCE BEGIN -------------------------------------\npackage com.jamiltron.homunculus.controller;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport com.badlogic.gdx.Game;\nimport com.jamiltron.homunculus.Assets;\nimport com.jamiltron.homunculus.Settings;\nimport com.jamiltron.homunculus.model.Component;\nimport com.jamiltron.homunculus.model.Homunculus;\nimport com.jamiltron.homunculus.model.Spell;\nimport com.jamiltron.homunculus.model.World;\nimport com.jamiltron.homunculus.screen.MainMenu;\nimport com.jamiltron.homunculus.util.JArray;\n\npublic class WorldController {\n  enum Keys {\n    LEFT, RIGHT, ROTR, ROTL, DROP, PAUSE, ANY;\n  }\n\n  public boolean nextLevel;\n  private final Game game;\n  private World world;\n  private Spell activeSpell;\n  private final Settings settings;\n  private boolean unpausable;\n  float currentTime;\n  float dropTime;\n  float fastTime;\n  public float normalTime;\n  float pauseTime;\n  int drops;\n\n  JArray<Boolean> toDestroy;\n\n  static Map<Keys, Boolean> keys = new HashMap<WorldController.Keys, Boolean>();\n  static {\n    keys.put(Keys.LEFT, false);\n    keys.put(Keys.RIGHT, false);\n    keys.put(Keys.ROTR, false);\n    keys.put(Keys.ROTL, false);\n    keys.put(Keys.DROP, false);\n    keys.put(Keys.PAUSE, false);\n    keys.put(Keys.ANY, false);\n  };\n\n  public void resetKeys() {\n    keys.put(Keys.LEFT, false);\n    keys.put(Keys.RIGHT, false);\n    keys.put(Keys.ROTR, false);\n    keys.put(Keys.ROTL, false);\n    keys.put(Keys.DROP, false);\n    keys.put(Keys.PAUSE, false);\n    keys.put(Keys.ANY, false);\n  }\n\n  public void leftPress() {\n    keys.put(Keys.LEFT, true);\n  }\n\n  public void rightPress() {\n    keys.put(Keys.RIGHT, true);\n  }\n\n  public void rotrPress() {\n    keys.put(Keys.ROTR, true);\n  }\n\n  public void rotlPress() {\n    keys.put(Keys.ROTL, true);\n  }\n\n  public void dropPress() {\n    keys.put(Keys.DROP, true);\n  }\n\n  public void pausePress() {\n    keys.put(Keys.PAUSE, true);\n  }\n\n  public void anyPress() {\n    keys.put(Keys.ANY, true);\n  }\n\n  public void leftRelease() {\n    keys.put(Keys.LEFT, false);\n  }\n\n  public void rightRelease() {\n    keys.put(Keys.RIGHT, false);\n  }\n\n  public void rotrRelease() {\n    keys.put(Keys.ROTR, false);\n  }\n\n  public void rotlRelease() {\n    keys.put(Keys.ROTL, false);\n  }\n\n  public void dropRelease() {\n    keys.put(Keys.DROP, false);\n  }\n\n  public void pauseRelease() {\n    keys.put(Keys.PAUSE, false);\n  }\n\n  public void anyRelease() {\n    keys.put(Keys.ANY, false);\n  }\n\n  public void resetController(World w) {\n    world = w;\n    nextLevel = false;\n    pauseTime = 0.15f;\n    drops = 0;\n    activeSpell = world.getActiveSpell();\n    currentTime = 0f;\n\n    // grab the game speed from the settings\n    if (settings.getSpeed().ordinal() == 0) {\n      normalTime = 0.75f;\n      fastTime = 0.1f;\n    } else if (settings.getSpeed().ordinal() == 1) {\n      normalTime = 0.5f;\n      fastTime = 0.1f;\n    } else if (settings.getSpeed().ordinal() == 2) {\n      normalTime = 0.25f;\n      fastTime = 0.08f;\n    } else {\n      throw new IllegalArgumentException(""Invalid speed setting"");\n    }\n\n    dropTime = normalTime;\n    for (int y = 2; y <= 18; y++) {\n      for (int x = 2; x <= 9; x++) {\n        toDestroy.set(x, y, false);\n      }\n    }\n  }\n\n  public WorldController(World w, Settings s, Game g) {\n    nextLevel = false;\n    game = g;\n    unpausable = true;\n    settings = s;\n    pauseTime = 0.15f;\n    drops = 0;\n    world = w;\n    activeSpell = w.getActiveSpell();\n    currentTime = 0f;\n\n    // grab the game speed from the settings\n    if (settings.getSpeed().ordinal() == 0) {\n      normalTime = 0.75f;\n      fastTime = 0.1f;\n    } else if (settings.getSpeed().ordinal() == 1) {\n      normalTime = 0.5f;\n      fastTime = 0.1f;\n    } else if (settings.getSpeed().ordinal() == 2) {\n      normalTime = 0.25f;\n      fastTime = 0.08f;\n    } else {\n      throw new IllegalArgumentException(""Invalid speed setting"");\n    }\n\n    dropTime = normalTime;\n    toDestroy = new JArray<Boolean>(8, 17);\n    for (int y = 2; y <= 18; y++) {\n      for (int x = 2; x <= 9; x++) {\n        toDestroy.set(x, y, false);\n      }\n    }\n  }\n\n  public void updateOver() {\n    if (!world.lost && !world.won\n        && (world.getGrid(5, 18) != null || world.getGrid(6, 18) != null)) {\n      world.lost = true;\n      resetKeys();\n    }\n\n    if (world.lost && keys.get(Keys.ANY)) {\n      game.setScreen(new MainMenu(game));\n    }\n  }\n  public void updatePaused() {\n    // if the game is not paused, pause it\n    if (unpausable && !world.paused && keys.get(Keys.PAUSE)) {\n      world.paused = true;\n      unpausable = false;\n      // if the game is paused, unpause it\n    } else if (unpausable && world.paused && keys.get(Keys.ANY)) {\n      world.paused = false;\n      unpausable = false;\n      resetKeys();\n    } else if (keys.get(Keys.PAUSE) == false) {\n      unpausable = true;\n    }\n  }\n\n  public void updateWon() {\n    if (!world.won && world.homunculi.size == 0) {\n      world.won = true;\n      resetKeys();\n    }\n\n    if (world.won && keys.get(Keys.ANY)) {\n      activeSpell = null;\n      nextLevel = true;\n    }\n  }\n\n  public void update(float dt) {\n    updateOver();\n    if (!world.lost) {\n      updateWon();\n      if (!world.won) {\n        updatePaused();\n        if (!world.paused) {\n          if (!updateDrops(dt)) {\n            if (keys.get(Keys.DROP) && activeSpell != null) {\n              dropTime = fastTime;\n            } else {\n              dropTime = normalTime;\n            }\n            currentTime += dt;\n            if (currentTime >= dropTime) {\n              currentTime -= dropTime;\n              if (activeSpell == null) {\n                world.restSpell();\n                activeSpell = world.getActiveSpell();\n              } else {\n                activeSpell.setVel(null, -Component.SPEED);\n              }\n            }\n            updateSpell(dt);\n            updateMatches();\n          }\n        }\n      }\n    }\n  }\n  private boolean updateDrops(float dt) {\n    boolean check1;\n    boolean check2;\n    boolean keepChecking = false;\n\n    for (Spell spell : world.setSpells) {\n      check1 = true;\n      check2 = true;\n      if (spell.component1 == null)\n        check1 = false;\n      if (spell.component2 == null)\n        check2 = false;\n\n      if (check1 && check2) {\n\n        if (spell.component1.pos.y > 2\n            && spell.component2.pos.y > 2\n            && world.getGrid(spell.component1.pos.x, spell.bottom() - 1f) == null\n            && world.getGrid(spell.component2.pos.x, spell.bottom() - 1f) == null) {\n          world.putGrid(spell.component1.pos.x, spell.component1.pos.y, null);\n          world.putGrid(spell.component2.pos.x, spell.component2.pos.y, null);\n          spell.setVel(null, -1f);\n          keepChecking = true;\n        } else {\n          world.putGrid(spell.component1.pos.x, spell.component1.pos.y,\n              spell.component1.color);\n          world.putGrid(spell.component2.pos.x, spell.component2.pos.y,\n              spell.component2.color);\n        }\n      } else if (check1) {\n        if ((spell.component1.pos.y != 2)\n            && world.getGrid(spell.component1.pos.x,\n                spell.component1.pos.y - 1f) == null) {\n          world.putGrid(spell.component1.pos.x, spell.component1.pos.y, null);\n          spell.setVel(null, -1f);\n          keepChecking = true;\n        } else {\n          world.putGrid(spell.component1.pos.x, spell.component1.pos.y,\n              spell.component1.color);\n        }\n\n      } else if (check2) {\n        if ((spell.component2.pos.y != 2)\n            && world.getGrid(spell.component2.pos.x,\n                spell.component2.pos.y - 1f) == null) {\n          world.putGrid(spell.component2.pos.x, spell.component2.pos.y, null);\n          spell.setVel(null, -1f);\n          keepChecking = true;\n        } else {\n          world.putGrid(spell.component2.pos.x, spell.component2.pos.y,\n              spell.component2.color);\n        }\n      } else {\n        throw new Error(""Error condition in updateDrops."");\n      }\n      spell.update(dt);\n      spell.setVel(null, 0f);\n    }\n\n    return keepChecking;\n  }\n\n  private void updateMatches() {\n    boolean playSound = false;\n\n    // check for rows to destroy\n    for (int y = 2; y <= 18; y++) {\n      for (int x = 2; x <= 6; x++) {\n        if ((world.getGrid(x, y) != null)\n            && world.getGrid(x, y) == (world.getGrid(x + 1, y))\n            && world.getGrid(x, y) == (world.getGrid(x + 2, y))\n            && world.getGrid(x, y) == (world.getGrid(x + 3, y))) {\n          for (int j = x; j <= x + 3; j++) {\n            toDestroy.set(j, y, true);\n            playSound = true;\n\n          }\n        }\n      }\n    }\n\n    // check for columns to destroy\n    for (int y = 2; y <= 15; y++) {\n      for (int x = 2; x <= 9; x++) {\n        if ((world.getGrid(x, y) != null)\n            && world.getGrid(x, y) == (world.getGrid(x, y + 1))\n            && world.getGrid(x, y) == (world.getGrid(x, y + 2))\n            && world.getGrid(x, y) == (world.getGrid(x, y + 3))) {\n          for (int j = y; j <= y + 3; j++) {\n            toDestroy.set(x, j, true);\n            playSound = true;\n          }\n        }\n      }\n    }\n\n    // go through each spell, and destroy it if it matches an entry in toDestroy\n    for (Spell spell : world.setSpells) {\n      float x, y;\n      if ((spell != null) && (spell.component1 != null)\n          && toDestroy.get(spell.component1.pos.x, spell.component1.pos.y)) {\n        x = spell.component1.pos.x;\n        y = spell.component1.pos.y;\n        spell.component1 = null;\n        world.putGrid(x, y, null);\n        toDestroy.set(x, y, false);\n      }\n      if ((spell != null) && (spell.component2 != null)\n          && toDestroy.get(spell.component2.pos.x, spell.component2.pos.y)) {\n        x = spell.component2.pos.x;\n        y = spell.component2.pos.y;\n        spell.component2 = null;\n        world.putGrid(x, y, null);\n        toDestroy.set(x, y, false);\n      }\n\n      if ((spell != null) && (spell.component1 == null)\n          && spell.component2 == null) {\n        world.deadSpells.add(spell);\n      }\n    }\n\n    // go through each homunculi and destroy it need be\n    for (Homunculus homunculi : world.homunculi) {\n      float x, y;\n      if ((homunculi != null)\n          && toDestroy.get(homunculi.pos.x, homunculi.pos.y)) {\n\n        x = homunculi.pos.x;\n        y = homunculi.pos.y;\n        world.deadHomunculi.add(homunculi);\n        world.putGrid(x, y, null);\n        toDestroy.set(x, y, false);\n      }\n    }\n\n    scoreUp();\n    world.cleanUp();\n\n    if (playSound)\n      Assets.playSound(Assets.match);\n  }\n\n  private void scoreUp() {\n    if (world.deadHomunculi.size > 0) {\n      world.score += settings.getScoreModifier()\n          * Math.pow(2, world.deadHomunculi.size - 1);\n    }\n  }\n  private void updateSpell(float dt) {\n    if (activeSpell != null) {\n      boolean canMove = true;\n      boolean playRotate = false;\n\n      // check if rotating right and can rotate\n      if (keys.get(Keys.ROTR) && activeSpell.getRotateTime() <= 0) {\n        if (activeSpell.isFlat() && activeSpell.topComponent().pos.y < 17) {\n          if (world.getGrid(activeSpell.leftComponent().pos.x,\n              activeSpell.leftComponent().pos.y + 1f) == null) {\n            Component left = activeSpell.leftComponent();\n            Component right = activeSpell.rightComponent();\n            right.pos.x -= 1f;\n            left.pos.y += 1f;\n            activeSpell.setRotateTime(0.25f + dt);\n            playRotate = true;\n          }\n        } else if (activeSpell.isStanding()\n            && activeSpell.topComponent().pos.y < 18\n            && activeSpell.rightComponent().pos.x < 9) {\n          if (world.getGrid(activeSpell.bottomComponent().pos.x + 1f,\n              activeSpell.bottomComponent().pos.y) == null) {\n            Component top = activeSpell.topComponent();\n            top.pos.x += 1f;\n            top.pos.y -= 1f;\n            activeSpell.setRotateTime(0.25f + dt);\n            playRotate = true;\n\n          }\n        }\n      }\n\n      // check if rotating left and can rotate\n      if (keys.get(Keys.ROTL) && activeSpell.getRotateTime() <= 0) {\n        if (activeSpell.isFlat() && activeSpell.topComponent().pos.y < 17) {\n          if (world.getGrid(activeSpell.leftComponent().pos.x,\n              activeSpell.leftComponent().pos.y + 1f) == null) {\n            Component right = activeSpell.rightComponent();\n            right.pos.y += 1f;\n            right.pos.x -= 1f;\n            activeSpell.setRotateTime(0.25f + dt);\n            playRotate = true;\n          }\n        } else if (activeSpell.isStanding()\n            && activeSpell.topComponent().pos.y < 18\n            && activeSpell.leftComponent().pos.x < 9) {\n          if (world.getGrid(activeSpell.bottomComponent().pos.x + 1f,\n              activeSpell.bottomComponent().pos.y) == null) {\n            Component top = activeSpell.topComponent();\n            Component bottom = activeSpell.bottomComponent();\n            top.pos.y -= 1f;\n            bottom.pos.x += 1f;\n            activeSpell.setRotateTime(0.25f + dt);\n            playRotate = true;\n          }\n        }\n      }\n\n      // check if we can move left\n      if (keys.get(Keys.LEFT) && activeSpell.getPauseTime() <= 0f\n          && activeSpell.leftComponent().pos.x > 2\n          && activeSpell.topComponent().pos.y < 18) {\n\n        if ((world.getGrid(activeSpell.topComponent().pos.x - 1f,\n            activeSpell.topComponent().pos.y) != null)\n            || (world.getGrid(activeSpell.bottomComponent().pos.x - 1f,\n                activeSpell.bottomComponent().pos.y) != null)\n            || (world.getGrid(activeSpell.leftComponent().pos.x - 1f,\n                activeSpell.leftComponent().pos.y) != null)) {\n          canMove = false;\n        }\n\n        if (canMove) {\n          activeSpell.setPauseTime(pauseTime + dt);\n          activeSpell.setVel(-Component.SPEED, null);\n        }\n        canMove = true;\n      }\n\n      // check if we can move right\n      if (keys.get(Keys.RIGHT) && activeSpell.getPauseTime() <= 0f\n          && activeSpell.rightComponent().pos.x < 9\n          && activeSpell.topComponent().pos.y < 18) {\n\n        if ((world.getGrid(activeSpell.topComponent().pos.x + 1f,\n            activeSpell.topComponent().pos.y) != null)\n            || (world.getGrid(activeSpell.bottomComponent().pos.x + 1f,\n                activeSpell.bottomComponent().pos.y) != null)\n            || (world.getGrid(activeSpell.rightComponent().pos.x + 1f,\n                activeSpell.rightComponent().pos.y) != null)) {\n          canMove = false;\n        }\n\n        if (canMove) {\n          activeSpell.setPauseTime(pauseTime + dt);\n          activeSpell.setVel(Component.SPEED, null);\n        }\n        canMove = true;\n      }\n\n      // nullify movement if the player is holding down both\n      if (keys.get(Keys.LEFT) && keys.get(Keys.RIGHT)) {\n        activeSpell.setVel(0f, null);\n      }\n\n      // check if we can move down\n\n      if (activeSpell.bottomComponent().pos.y == 2f) {\n        canMove = false;\n      } else {\n        if ((activeSpell.bottomComponent().pos.y > 2f((world.getGrid(activeSpell.leftComponent().pos.x,\n            activeSpell.leftComponent().pos.y - 1f) != null)\n            || (world.getGrid(activeSpell.rightComponent().pos.x,\n                activeSpell.rightComponent().pos.y - 1f) != null) || (world\n            .getGrid(activeSpell.bottomComponent().pos.x,\n                activeSpell.bottomComponent().pos.y - 1f) != null))\n            && (activeSpell.getVel().y == -Component.SPEED)) {\n          canMove = false;\n        }\n      }\n        \n      if (canMove) {\n        activeSpell.update(dt);\n        // after having moved, see if we are occupying some other entity\n        if ((world.getGrid(activeSpell.component1.pos.x,\n            activeSpell.component1.pos.y) != null)\n            || (world.getGrid(activeSpell.component2.pos.x,\n                activeSpell.component2.pos.y) != null)) {\n          activeSpell.setVel(activeSpell.component1.vel.x * -1f, 0f);\n          activeSpell.update(0f);\n        }\n        activeSpell.setVel(0f, 0f);\n      } else if (activeSpell.getVel().y == -Component.SPEED) {\n        drops += 1;\n        if (drops % 10 == 0 && drops != 0) {\n          normalTime -= 0.01f;\n          fastTime -= 0.01f;\n          if (normalTime < 0.01f)\n            normalTime = 0.01f;\n          if (fastTime < 0.01f)\n            fastTime = 0.01f;\n        }\n        Assets.playSound(Assets.drop);\n        activeSpell.setVel(0f, 0f);\n        world.restSpell();\n        activeSpell = world.getActiveSpell();\n      }\n\n      if (playRotate) {\n        Assets.playSound(Assets.rotate);\n      }\n    }\n  }\n\n}\n----------------------------------- SOURCE END -------------------------------------",1357098875044
